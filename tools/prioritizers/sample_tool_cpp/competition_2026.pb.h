// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: competition_2026.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_competition_5f2026_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_competition_5f2026_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_competition_5f2026_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_competition_5f2026_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_competition_5f2026_2eproto;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class InitializationReply;
class InitializationReplyDefaultTypeInternal;
extern InitializationReplyDefaultTypeInternal _InitializationReply_default_instance_;
class NameReply;
class NameReplyDefaultTypeInternal;
extern NameReplyDefaultTypeInternal _NameReply_default_instance_;
class Oracle;
class OracleDefaultTypeInternal;
extern OracleDefaultTypeInternal _Oracle_default_instance_;
class PrioritizationReply;
class PrioritizationReplyDefaultTypeInternal;
extern PrioritizationReplyDefaultTypeInternal _PrioritizationReply_default_instance_;
class RoadPoint;
class RoadPointDefaultTypeInternal;
extern RoadPointDefaultTypeInternal _RoadPoint_default_instance_;
class SDCTestCase;
class SDCTestCaseDefaultTypeInternal;
extern SDCTestCaseDefaultTypeInternal _SDCTestCase_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Empty* Arena::CreateMaybeMessage<::Empty>(Arena*);
template<> ::InitializationReply* Arena::CreateMaybeMessage<::InitializationReply>(Arena*);
template<> ::NameReply* Arena::CreateMaybeMessage<::NameReply>(Arena*);
template<> ::Oracle* Arena::CreateMaybeMessage<::Oracle>(Arena*);
template<> ::PrioritizationReply* Arena::CreateMaybeMessage<::PrioritizationReply>(Arena*);
template<> ::RoadPoint* Arena::CreateMaybeMessage<::RoadPoint>(Arena*);
template<> ::SDCTestCase* Arena::CreateMaybeMessage<::SDCTestCase>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {};
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_competition_5f2026_2eproto);
    return ::descriptor_table_competition_5f2026_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_competition_5f2026_2eproto;
};
// -------------------------------------------------------------------

class NameReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NameReply) */ {
 public:
  inline NameReply() : NameReply(nullptr) {};
  virtual ~NameReply();

  NameReply(const NameReply& from);
  NameReply(NameReply&& from) noexcept
    : NameReply() {
    *this = ::std::move(from);
  }

  inline NameReply& operator=(const NameReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline NameReply& operator=(NameReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NameReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameReply* internal_default_instance() {
    return reinterpret_cast<const NameReply*>(
               &_NameReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NameReply& a, NameReply& b) {
    a.Swap(&b);
  }
  inline void Swap(NameReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NameReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NameReply* New() const final {
    return CreateMaybeMessage<NameReply>(nullptr);
  }

  NameReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NameReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NameReply& from);
  void MergeFrom(const NameReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NameReply";
  }
  protected:
  explicit NameReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_competition_5f2026_2eproto);
    return ::descriptor_table_competition_5f2026_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:NameReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_competition_5f2026_2eproto;
};
// -------------------------------------------------------------------

class Oracle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Oracle) */ {
 public:
  inline Oracle() : Oracle(nullptr) {};
  virtual ~Oracle();

  Oracle(const Oracle& from);
  Oracle(Oracle&& from) noexcept
    : Oracle() {
    *this = ::std::move(from);
  }

  inline Oracle& operator=(const Oracle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Oracle& operator=(Oracle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Oracle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Oracle* internal_default_instance() {
    return reinterpret_cast<const Oracle*>(
               &_Oracle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Oracle& a, Oracle& b) {
    a.Swap(&b);
  }
  inline void Swap(Oracle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Oracle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Oracle* New() const final {
    return CreateMaybeMessage<Oracle>(nullptr);
  }

  Oracle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Oracle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Oracle& from);
  void MergeFrom(const Oracle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Oracle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Oracle";
  }
  protected:
  explicit Oracle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_competition_5f2026_2eproto);
    return ::descriptor_table_competition_5f2026_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestCaseFieldNumber = 1,
    kHasFailedFieldNumber = 2,
  };
  // .SDCTestCase testCase = 1;
  bool has_testcase() const;
  private:
  bool _internal_has_testcase() const;
  public:
  void clear_testcase();
  const ::SDCTestCase& testcase() const;
  ::SDCTestCase* release_testcase();
  ::SDCTestCase* mutable_testcase();
  void set_allocated_testcase(::SDCTestCase* testcase);
  private:
  const ::SDCTestCase& _internal_testcase() const;
  ::SDCTestCase* _internal_mutable_testcase();
  public:
  void unsafe_arena_set_allocated_testcase(
      ::SDCTestCase* testcase);
  ::SDCTestCase* unsafe_arena_release_testcase();

  // bool hasFailed = 2;
  void clear_hasfailed();
  bool hasfailed() const;
  void set_hasfailed(bool value);
  private:
  bool _internal_hasfailed() const;
  void _internal_set_hasfailed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Oracle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::SDCTestCase* testcase_;
  bool hasfailed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_competition_5f2026_2eproto;
};
// -------------------------------------------------------------------

class SDCTestCase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SDCTestCase) */ {
 public:
  inline SDCTestCase() : SDCTestCase(nullptr) {};
  virtual ~SDCTestCase();

  SDCTestCase(const SDCTestCase& from);
  SDCTestCase(SDCTestCase&& from) noexcept
    : SDCTestCase() {
    *this = ::std::move(from);
  }

  inline SDCTestCase& operator=(const SDCTestCase& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDCTestCase& operator=(SDCTestCase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SDCTestCase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDCTestCase* internal_default_instance() {
    return reinterpret_cast<const SDCTestCase*>(
               &_SDCTestCase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SDCTestCase& a, SDCTestCase& b) {
    a.Swap(&b);
  }
  inline void Swap(SDCTestCase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDCTestCase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SDCTestCase* New() const final {
    return CreateMaybeMessage<SDCTestCase>(nullptr);
  }

  SDCTestCase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SDCTestCase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SDCTestCase& from);
  void MergeFrom(const SDCTestCase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDCTestCase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SDCTestCase";
  }
  protected:
  explicit SDCTestCase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_competition_5f2026_2eproto);
    return ::descriptor_table_competition_5f2026_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoadPointsFieldNumber = 2,
    kTestIdFieldNumber = 1,
  };
  // repeated .RoadPoint roadPoints = 2;
  int roadpoints_size() const;
  private:
  int _internal_roadpoints_size() const;
  public:
  void clear_roadpoints();
  ::RoadPoint* mutable_roadpoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPoint >*
      mutable_roadpoints();
  private:
  const ::RoadPoint& _internal_roadpoints(int index) const;
  ::RoadPoint* _internal_add_roadpoints();
  public:
  const ::RoadPoint& roadpoints(int index) const;
  ::RoadPoint* add_roadpoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPoint >&
      roadpoints() const;

  // string testId = 1;
  void clear_testid();
  const std::string& testid() const;
  void set_testid(const std::string& value);
  void set_testid(std::string&& value);
  void set_testid(const char* value);
  void set_testid(const char* value, size_t size);
  std::string* mutable_testid();
  std::string* release_testid();
  void set_allocated_testid(std::string* testid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_testid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_testid(
      std::string* testid);
  private:
  const std::string& _internal_testid() const;
  void _internal_set_testid(const std::string& value);
  std::string* _internal_mutable_testid();
  public:

  // @@protoc_insertion_point(class_scope:SDCTestCase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPoint > roadpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr testid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_competition_5f2026_2eproto;
};
// -------------------------------------------------------------------

class RoadPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RoadPoint) */ {
 public:
  inline RoadPoint() : RoadPoint(nullptr) {};
  virtual ~RoadPoint();

  RoadPoint(const RoadPoint& from);
  RoadPoint(RoadPoint&& from) noexcept
    : RoadPoint() {
    *this = ::std::move(from);
  }

  inline RoadPoint& operator=(const RoadPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadPoint& operator=(RoadPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoadPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadPoint* internal_default_instance() {
    return reinterpret_cast<const RoadPoint*>(
               &_RoadPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RoadPoint& a, RoadPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoadPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoadPoint* New() const final {
    return CreateMaybeMessage<RoadPoint>(nullptr);
  }

  RoadPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoadPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoadPoint& from);
  void MergeFrom(const RoadPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RoadPoint";
  }
  protected:
  explicit RoadPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_competition_5f2026_2eproto);
    return ::descriptor_table_competition_5f2026_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceNumberFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // int64 sequenceNumber = 1;
  void clear_sequencenumber();
  ::PROTOBUF_NAMESPACE_ID::int64 sequencenumber() const;
  void set_sequencenumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sequencenumber() const;
  void _internal_set_sequencenumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:RoadPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 sequencenumber_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_competition_5f2026_2eproto;
};
// -------------------------------------------------------------------

class InitializationReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InitializationReply) */ {
 public:
  inline InitializationReply() : InitializationReply(nullptr) {};
  virtual ~InitializationReply();

  InitializationReply(const InitializationReply& from);
  InitializationReply(InitializationReply&& from) noexcept
    : InitializationReply() {
    *this = ::std::move(from);
  }

  inline InitializationReply& operator=(const InitializationReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitializationReply& operator=(InitializationReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitializationReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitializationReply* internal_default_instance() {
    return reinterpret_cast<const InitializationReply*>(
               &_InitializationReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InitializationReply& a, InitializationReply& b) {
    a.Swap(&b);
  }
  inline void Swap(InitializationReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitializationReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitializationReply* New() const final {
    return CreateMaybeMessage<InitializationReply>(nullptr);
  }

  InitializationReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitializationReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitializationReply& from);
  void MergeFrom(const InitializationReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitializationReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InitializationReply";
  }
  protected:
  explicit InitializationReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_competition_5f2026_2eproto);
    return ::descriptor_table_competition_5f2026_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOkFieldNumber = 1,
  };
  // bool ok = 1;
  void clear_ok();
  bool ok() const;
  void set_ok(bool value);
  private:
  bool _internal_ok() const;
  void _internal_set_ok(bool value);
  public:

  // @@protoc_insertion_point(class_scope:InitializationReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_competition_5f2026_2eproto;
};
// -------------------------------------------------------------------

class PrioritizationReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PrioritizationReply) */ {
 public:
  inline PrioritizationReply() : PrioritizationReply(nullptr) {};
  virtual ~PrioritizationReply();

  PrioritizationReply(const PrioritizationReply& from);
  PrioritizationReply(PrioritizationReply&& from) noexcept
    : PrioritizationReply() {
    *this = ::std::move(from);
  }

  inline PrioritizationReply& operator=(const PrioritizationReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrioritizationReply& operator=(PrioritizationReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrioritizationReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrioritizationReply* internal_default_instance() {
    return reinterpret_cast<const PrioritizationReply*>(
               &_PrioritizationReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PrioritizationReply& a, PrioritizationReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PrioritizationReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrioritizationReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrioritizationReply* New() const final {
    return CreateMaybeMessage<PrioritizationReply>(nullptr);
  }

  PrioritizationReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrioritizationReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrioritizationReply& from);
  void MergeFrom(const PrioritizationReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrioritizationReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PrioritizationReply";
  }
  protected:
  explicit PrioritizationReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_competition_5f2026_2eproto);
    return ::descriptor_table_competition_5f2026_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestIdFieldNumber = 1,
  };
  // string testId = 1;
  void clear_testid();
  const std::string& testid() const;
  void set_testid(const std::string& value);
  void set_testid(std::string&& value);
  void set_testid(const char* value);
  void set_testid(const char* value, size_t size);
  std::string* mutable_testid();
  std::string* release_testid();
  void set_allocated_testid(std::string* testid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_testid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_testid(
      std::string* testid);
  private:
  const std::string& _internal_testid() const;
  void _internal_set_testid(const std::string& value);
  std::string* _internal_mutable_testid();
  public:

  // @@protoc_insertion_point(class_scope:PrioritizationReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr testid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_competition_5f2026_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// NameReply

// string name = 1;
inline void NameReply::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NameReply::name() const {
  // @@protoc_insertion_point(field_get:NameReply.name)
  return _internal_name();
}
inline void NameReply::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:NameReply.name)
}
inline std::string* NameReply::mutable_name() {
  // @@protoc_insertion_point(field_mutable:NameReply.name)
  return _internal_mutable_name();
}
inline const std::string& NameReply::_internal_name() const {
  return name_.Get();
}
inline void NameReply::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NameReply::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NameReply.name)
}
inline void NameReply::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:NameReply.name)
}
inline void NameReply::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NameReply.name)
}
inline std::string* NameReply::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NameReply::release_name() {
  // @@protoc_insertion_point(field_release:NameReply.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NameReply::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NameReply.name)
}
inline std::string* NameReply::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NameReply.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NameReply::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NameReply.name)
}

// -------------------------------------------------------------------

// Oracle

// .SDCTestCase testCase = 1;
inline bool Oracle::_internal_has_testcase() const {
  return this != internal_default_instance() && testcase_ != nullptr;
}
inline bool Oracle::has_testcase() const {
  return _internal_has_testcase();
}
inline void Oracle::clear_testcase() {
  if (GetArena() == nullptr && testcase_ != nullptr) {
    delete testcase_;
  }
  testcase_ = nullptr;
}
inline const ::SDCTestCase& Oracle::_internal_testcase() const {
  const ::SDCTestCase* p = testcase_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SDCTestCase*>(
      &::_SDCTestCase_default_instance_);
}
inline const ::SDCTestCase& Oracle::testcase() const {
  // @@protoc_insertion_point(field_get:Oracle.testCase)
  return _internal_testcase();
}
inline void Oracle::unsafe_arena_set_allocated_testcase(
    ::SDCTestCase* testcase) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(testcase_);
  }
  testcase_ = testcase;
  if (testcase) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Oracle.testCase)
}
inline ::SDCTestCase* Oracle::release_testcase() {
  auto temp = unsafe_arena_release_testcase();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SDCTestCase* Oracle::unsafe_arena_release_testcase() {
  // @@protoc_insertion_point(field_release:Oracle.testCase)
  
  ::SDCTestCase* temp = testcase_;
  testcase_ = nullptr;
  return temp;
}
inline ::SDCTestCase* Oracle::_internal_mutable_testcase() {
  
  if (testcase_ == nullptr) {
    auto* p = CreateMaybeMessage<::SDCTestCase>(GetArena());
    testcase_ = p;
  }
  return testcase_;
}
inline ::SDCTestCase* Oracle::mutable_testcase() {
  // @@protoc_insertion_point(field_mutable:Oracle.testCase)
  return _internal_mutable_testcase();
}
inline void Oracle::set_allocated_testcase(::SDCTestCase* testcase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete testcase_;
  }
  if (testcase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(testcase);
    if (message_arena != submessage_arena) {
      testcase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, testcase, submessage_arena);
    }
    
  } else {
    
  }
  testcase_ = testcase;
  // @@protoc_insertion_point(field_set_allocated:Oracle.testCase)
}

// bool hasFailed = 2;
inline void Oracle::clear_hasfailed() {
  hasfailed_ = false;
}
inline bool Oracle::_internal_hasfailed() const {
  return hasfailed_;
}
inline bool Oracle::hasfailed() const {
  // @@protoc_insertion_point(field_get:Oracle.hasFailed)
  return _internal_hasfailed();
}
inline void Oracle::_internal_set_hasfailed(bool value) {
  
  hasfailed_ = value;
}
inline void Oracle::set_hasfailed(bool value) {
  _internal_set_hasfailed(value);
  // @@protoc_insertion_point(field_set:Oracle.hasFailed)
}

// -------------------------------------------------------------------

// SDCTestCase

// string testId = 1;
inline void SDCTestCase::clear_testid() {
  testid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SDCTestCase::testid() const {
  // @@protoc_insertion_point(field_get:SDCTestCase.testId)
  return _internal_testid();
}
inline void SDCTestCase::set_testid(const std::string& value) {
  _internal_set_testid(value);
  // @@protoc_insertion_point(field_set:SDCTestCase.testId)
}
inline std::string* SDCTestCase::mutable_testid() {
  // @@protoc_insertion_point(field_mutable:SDCTestCase.testId)
  return _internal_mutable_testid();
}
inline const std::string& SDCTestCase::_internal_testid() const {
  return testid_.Get();
}
inline void SDCTestCase::_internal_set_testid(const std::string& value) {
  
  testid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SDCTestCase::set_testid(std::string&& value) {
  
  testid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SDCTestCase.testId)
}
inline void SDCTestCase::set_testid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  testid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SDCTestCase.testId)
}
inline void SDCTestCase::set_testid(const char* value,
    size_t size) {
  
  testid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SDCTestCase.testId)
}
inline std::string* SDCTestCase::_internal_mutable_testid() {
  
  return testid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SDCTestCase::release_testid() {
  // @@protoc_insertion_point(field_release:SDCTestCase.testId)
  return testid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SDCTestCase::set_allocated_testid(std::string* testid) {
  if (testid != nullptr) {
    
  } else {
    
  }
  testid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), testid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SDCTestCase.testId)
}
inline std::string* SDCTestCase::unsafe_arena_release_testid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SDCTestCase.testId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return testid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SDCTestCase::unsafe_arena_set_allocated_testid(
    std::string* testid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (testid != nullptr) {
    
  } else {
    
  }
  testid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      testid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SDCTestCase.testId)
}

// repeated .RoadPoint roadPoints = 2;
inline int SDCTestCase::_internal_roadpoints_size() const {
  return roadpoints_.size();
}
inline int SDCTestCase::roadpoints_size() const {
  return _internal_roadpoints_size();
}
inline void SDCTestCase::clear_roadpoints() {
  roadpoints_.Clear();
}
inline ::RoadPoint* SDCTestCase::mutable_roadpoints(int index) {
  // @@protoc_insertion_point(field_mutable:SDCTestCase.roadPoints)
  return roadpoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPoint >*
SDCTestCase::mutable_roadpoints() {
  // @@protoc_insertion_point(field_mutable_list:SDCTestCase.roadPoints)
  return &roadpoints_;
}
inline const ::RoadPoint& SDCTestCase::_internal_roadpoints(int index) const {
  return roadpoints_.Get(index);
}
inline const ::RoadPoint& SDCTestCase::roadpoints(int index) const {
  // @@protoc_insertion_point(field_get:SDCTestCase.roadPoints)
  return _internal_roadpoints(index);
}
inline ::RoadPoint* SDCTestCase::_internal_add_roadpoints() {
  return roadpoints_.Add();
}
inline ::RoadPoint* SDCTestCase::add_roadpoints() {
  // @@protoc_insertion_point(field_add:SDCTestCase.roadPoints)
  return _internal_add_roadpoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoadPoint >&
SDCTestCase::roadpoints() const {
  // @@protoc_insertion_point(field_list:SDCTestCase.roadPoints)
  return roadpoints_;
}

// -------------------------------------------------------------------

// RoadPoint

// int64 sequenceNumber = 1;
inline void RoadPoint::clear_sequencenumber() {
  sequencenumber_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoadPoint::_internal_sequencenumber() const {
  return sequencenumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoadPoint::sequencenumber() const {
  // @@protoc_insertion_point(field_get:RoadPoint.sequenceNumber)
  return _internal_sequencenumber();
}
inline void RoadPoint::_internal_set_sequencenumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sequencenumber_ = value;
}
inline void RoadPoint::set_sequencenumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sequencenumber(value);
  // @@protoc_insertion_point(field_set:RoadPoint.sequenceNumber)
}

// float x = 2;
inline void RoadPoint::clear_x() {
  x_ = 0;
}
inline float RoadPoint::_internal_x() const {
  return x_;
}
inline float RoadPoint::x() const {
  // @@protoc_insertion_point(field_get:RoadPoint.x)
  return _internal_x();
}
inline void RoadPoint::_internal_set_x(float value) {
  
  x_ = value;
}
inline void RoadPoint::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:RoadPoint.x)
}

// float y = 3;
inline void RoadPoint::clear_y() {
  y_ = 0;
}
inline float RoadPoint::_internal_y() const {
  return y_;
}
inline float RoadPoint::y() const {
  // @@protoc_insertion_point(field_get:RoadPoint.y)
  return _internal_y();
}
inline void RoadPoint::_internal_set_y(float value) {
  
  y_ = value;
}
inline void RoadPoint::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:RoadPoint.y)
}

// -------------------------------------------------------------------

// InitializationReply

// bool ok = 1;
inline void InitializationReply::clear_ok() {
  ok_ = false;
}
inline bool InitializationReply::_internal_ok() const {
  return ok_;
}
inline bool InitializationReply::ok() const {
  // @@protoc_insertion_point(field_get:InitializationReply.ok)
  return _internal_ok();
}
inline void InitializationReply::_internal_set_ok(bool value) {
  
  ok_ = value;
}
inline void InitializationReply::set_ok(bool value) {
  _internal_set_ok(value);
  // @@protoc_insertion_point(field_set:InitializationReply.ok)
}

// -------------------------------------------------------------------

// PrioritizationReply

// string testId = 1;
inline void PrioritizationReply::clear_testid() {
  testid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PrioritizationReply::testid() const {
  // @@protoc_insertion_point(field_get:PrioritizationReply.testId)
  return _internal_testid();
}
inline void PrioritizationReply::set_testid(const std::string& value) {
  _internal_set_testid(value);
  // @@protoc_insertion_point(field_set:PrioritizationReply.testId)
}
inline std::string* PrioritizationReply::mutable_testid() {
  // @@protoc_insertion_point(field_mutable:PrioritizationReply.testId)
  return _internal_mutable_testid();
}
inline const std::string& PrioritizationReply::_internal_testid() const {
  return testid_.Get();
}
inline void PrioritizationReply::_internal_set_testid(const std::string& value) {
  
  testid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PrioritizationReply::set_testid(std::string&& value) {
  
  testid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PrioritizationReply.testId)
}
inline void PrioritizationReply::set_testid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  testid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PrioritizationReply.testId)
}
inline void PrioritizationReply::set_testid(const char* value,
    size_t size) {
  
  testid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PrioritizationReply.testId)
}
inline std::string* PrioritizationReply::_internal_mutable_testid() {
  
  return testid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PrioritizationReply::release_testid() {
  // @@protoc_insertion_point(field_release:PrioritizationReply.testId)
  return testid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrioritizationReply::set_allocated_testid(std::string* testid) {
  if (testid != nullptr) {
    
  } else {
    
  }
  testid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), testid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PrioritizationReply.testId)
}
inline std::string* PrioritizationReply::unsafe_arena_release_testid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PrioritizationReply.testId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return testid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PrioritizationReply::unsafe_arena_set_allocated_testid(
    std::string* testid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (testid != nullptr) {
    
  } else {
    
  }
  testid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      testid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PrioritizationReply.testId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_competition_5f2026_2eproto
