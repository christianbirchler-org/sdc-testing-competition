// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: competition_2026.proto
#ifndef GRPC_competition_5f2026_2eproto__INCLUDED
#define GRPC_competition_5f2026_2eproto__INCLUDED

#include "competition_2026.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class CompetitionTool final {
 public:
  static constexpr char const* service_full_name() {
    return "CompetitionTool";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Name(::grpc::ClientContext* context, const ::Empty& request, ::NameReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NameReply>> AsyncName(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NameReply>>(AsyncNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NameReply>> PrepareAsyncName(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::NameReply>>(PrepareAsyncNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::Oracle>> Initialize(::grpc::ClientContext* context, ::InitializationReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::Oracle>>(InitializeRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::Oracle>> AsyncInitialize(::grpc::ClientContext* context, ::InitializationReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::Oracle>>(AsyncInitializeRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::Oracle>> PrepareAsyncInitialize(::grpc::ClientContext* context, ::InitializationReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::Oracle>>(PrepareAsyncInitializeRaw(context, response, cq));
    }
    // bidirectional streaming for high flexibility
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::SDCTestCase, ::PrioritizationReply>> Prioritize(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::SDCTestCase, ::PrioritizationReply>>(PrioritizeRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::SDCTestCase, ::PrioritizationReply>> AsyncPrioritize(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::SDCTestCase, ::PrioritizationReply>>(AsyncPrioritizeRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::SDCTestCase, ::PrioritizationReply>> PrepareAsyncPrioritize(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::SDCTestCase, ::PrioritizationReply>>(PrepareAsyncPrioritizeRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Name(::grpc::ClientContext* context, const ::Empty* request, ::NameReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Name(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NameReply* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Name(::grpc::ClientContext* context, const ::Empty* request, ::NameReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Name(::grpc::ClientContext* context, const ::Empty* request, ::NameReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Name(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NameReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Name(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NameReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Initialize(::grpc::ClientContext* context, ::InitializationReply* response, ::grpc::ClientWriteReactor< ::Oracle>* reactor) = 0;
      #else
      virtual void Initialize(::grpc::ClientContext* context, ::InitializationReply* response, ::grpc::experimental::ClientWriteReactor< ::Oracle>* reactor) = 0;
      #endif
      // bidirectional streaming for high flexibility
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Prioritize(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::SDCTestCase,::PrioritizationReply>* reactor) = 0;
      #else
      virtual void Prioritize(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::SDCTestCase,::PrioritizationReply>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NameReply>* AsyncNameRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::NameReply>* PrepareAsyncNameRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::Oracle>* InitializeRaw(::grpc::ClientContext* context, ::InitializationReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::Oracle>* AsyncInitializeRaw(::grpc::ClientContext* context, ::InitializationReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::Oracle>* PrepareAsyncInitializeRaw(::grpc::ClientContext* context, ::InitializationReply* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::SDCTestCase, ::PrioritizationReply>* PrioritizeRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::SDCTestCase, ::PrioritizationReply>* AsyncPrioritizeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::SDCTestCase, ::PrioritizationReply>* PrepareAsyncPrioritizeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Name(::grpc::ClientContext* context, const ::Empty& request, ::NameReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NameReply>> AsyncName(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NameReply>>(AsyncNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NameReply>> PrepareAsyncName(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::NameReply>>(PrepareAsyncNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::Oracle>> Initialize(::grpc::ClientContext* context, ::InitializationReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::Oracle>>(InitializeRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::Oracle>> AsyncInitialize(::grpc::ClientContext* context, ::InitializationReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::Oracle>>(AsyncInitializeRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::Oracle>> PrepareAsyncInitialize(::grpc::ClientContext* context, ::InitializationReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::Oracle>>(PrepareAsyncInitializeRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::SDCTestCase, ::PrioritizationReply>> Prioritize(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::SDCTestCase, ::PrioritizationReply>>(PrioritizeRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::SDCTestCase, ::PrioritizationReply>> AsyncPrioritize(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::SDCTestCase, ::PrioritizationReply>>(AsyncPrioritizeRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::SDCTestCase, ::PrioritizationReply>> PrepareAsyncPrioritize(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::SDCTestCase, ::PrioritizationReply>>(PrepareAsyncPrioritizeRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Name(::grpc::ClientContext* context, const ::Empty* request, ::NameReply* response, std::function<void(::grpc::Status)>) override;
      void Name(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NameReply* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Name(::grpc::ClientContext* context, const ::Empty* request, ::NameReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Name(::grpc::ClientContext* context, const ::Empty* request, ::NameReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Name(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NameReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Name(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NameReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Initialize(::grpc::ClientContext* context, ::InitializationReply* response, ::grpc::ClientWriteReactor< ::Oracle>* reactor) override;
      #else
      void Initialize(::grpc::ClientContext* context, ::InitializationReply* response, ::grpc::experimental::ClientWriteReactor< ::Oracle>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Prioritize(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::SDCTestCase,::PrioritizationReply>* reactor) override;
      #else
      void Prioritize(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::SDCTestCase,::PrioritizationReply>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::NameReply>* AsyncNameRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::NameReply>* PrepareAsyncNameRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::Oracle>* InitializeRaw(::grpc::ClientContext* context, ::InitializationReply* response) override;
    ::grpc::ClientAsyncWriter< ::Oracle>* AsyncInitializeRaw(::grpc::ClientContext* context, ::InitializationReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::Oracle>* PrepareAsyncInitializeRaw(::grpc::ClientContext* context, ::InitializationReply* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::SDCTestCase, ::PrioritizationReply>* PrioritizeRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::SDCTestCase, ::PrioritizationReply>* AsyncPrioritizeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::SDCTestCase, ::PrioritizationReply>* PrepareAsyncPrioritizeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Name_;
    const ::grpc::internal::RpcMethod rpcmethod_Initialize_;
    const ::grpc::internal::RpcMethod rpcmethod_Prioritize_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Name(::grpc::ServerContext* context, const ::Empty* request, ::NameReply* response);
    virtual ::grpc::Status Initialize(::grpc::ServerContext* context, ::grpc::ServerReader< ::Oracle>* reader, ::InitializationReply* response);
    // bidirectional streaming for high flexibility
    virtual ::grpc::Status Prioritize(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::PrioritizationReply, ::SDCTestCase>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Name : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Name() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Name() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Name(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::NameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestName(::grpc::ServerContext* context, ::Empty* request, ::grpc::ServerAsyncResponseWriter< ::NameReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Initialize() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Oracle>* /*reader*/, ::InitializationReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitialize(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::InitializationReply, ::Oracle>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Prioritize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Prioritize() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Prioritize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prioritize(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::PrioritizationReply, ::SDCTestCase>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrioritize(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::PrioritizationReply, ::SDCTestCase>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Name<WithAsyncMethod_Initialize<WithAsyncMethod_Prioritize<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Name : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Name() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::Empty, ::NameReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::Empty* request, ::NameReply* response) { return this->Name(context, request, response); }));}
    void SetMessageAllocatorFor_Name(
        ::grpc::experimental::MessageAllocator< ::Empty, ::NameReply>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::Empty, ::NameReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Name() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Name(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::NameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Name(
      ::grpc::CallbackServerContext* /*context*/, const ::Empty* /*request*/, ::NameReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Name(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::Empty* /*request*/, ::NameReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Initialize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::Oracle, ::InitializationReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::InitializationReply* response) { return this->Initialize(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Oracle>* /*reader*/, ::InitializationReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::Oracle>* Initialize(
      ::grpc::CallbackServerContext* /*context*/, ::InitializationReply* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::Oracle>* Initialize(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::InitializationReply* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Prioritize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Prioritize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackBidiHandler< ::SDCTestCase, ::PrioritizationReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Prioritize(context); }));
    }
    ~ExperimentalWithCallbackMethod_Prioritize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prioritize(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::PrioritizationReply, ::SDCTestCase>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::SDCTestCase, ::PrioritizationReply>* Prioritize(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::SDCTestCase, ::PrioritizationReply>* Prioritize(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Name<ExperimentalWithCallbackMethod_Initialize<ExperimentalWithCallbackMethod_Prioritize<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Name<ExperimentalWithCallbackMethod_Initialize<ExperimentalWithCallbackMethod_Prioritize<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Name : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Name() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Name() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Name(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::NameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Initialize() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Oracle>* /*reader*/, ::InitializationReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Prioritize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Prioritize() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Prioritize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prioritize(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::PrioritizationReply, ::SDCTestCase>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Name : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Name() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Name() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Name(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::NameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Initialize() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Oracle>* /*reader*/, ::InitializationReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitialize(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Prioritize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Prioritize() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Prioritize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prioritize(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::PrioritizationReply, ::SDCTestCase>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrioritize(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Name : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Name() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Name(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Name() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Name(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::NameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Name(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Name(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Initialize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->Initialize(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::Oracle>* /*reader*/, ::InitializationReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* Initialize(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* Initialize(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Prioritize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Prioritize() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Prioritize(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_Prioritize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Prioritize(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::PrioritizationReply, ::SDCTestCase>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Prioritize(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Prioritize(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Name : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Name() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Empty, ::NameReply>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::Empty, ::NameReply>* streamer) {
                       return this->StreamedName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Name() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Name(::grpc::ServerContext* /*context*/, const ::Empty* /*request*/, ::NameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Empty,::NameReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Name<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Name<Service > StreamedService;
};


#endif  // GRPC_competition_5f2026_2eproto__INCLUDED
