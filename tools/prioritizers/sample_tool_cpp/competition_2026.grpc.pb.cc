// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: competition_2026.proto

#include "competition_2026.pb.h"
#include "competition_2026.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* CompetitionTool_method_names[] = {
  "/CompetitionTool/Name",
  "/CompetitionTool/Initialize",
  "/CompetitionTool/Prioritize",
};

std::unique_ptr< CompetitionTool::Stub> CompetitionTool::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CompetitionTool::Stub> stub(new CompetitionTool::Stub(channel));
  return stub;
}

CompetitionTool::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Name_(CompetitionTool_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Initialize_(CompetitionTool_method_names[1], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Prioritize_(CompetitionTool_method_names[2], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status CompetitionTool::Stub::Name(::grpc::ClientContext* context, const ::Empty& request, ::NameReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Name_, context, request, response);
}

void CompetitionTool::Stub::experimental_async::Name(::grpc::ClientContext* context, const ::Empty* request, ::NameReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Name_, context, request, response, std::move(f));
}

void CompetitionTool::Stub::experimental_async::Name(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NameReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Name_, context, request, response, std::move(f));
}

void CompetitionTool::Stub::experimental_async::Name(::grpc::ClientContext* context, const ::Empty* request, ::NameReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Name_, context, request, response, reactor);
}

void CompetitionTool::Stub::experimental_async::Name(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::NameReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Name_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::NameReply>* CompetitionTool::Stub::AsyncNameRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::NameReply>::Create(channel_.get(), cq, rpcmethod_Name_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::NameReply>* CompetitionTool::Stub::PrepareAsyncNameRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::NameReply>::Create(channel_.get(), cq, rpcmethod_Name_, context, request, false);
}

::grpc::ClientWriter< ::Oracle>* CompetitionTool::Stub::InitializeRaw(::grpc::ClientContext* context, ::InitializationReply* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::Oracle>::Create(channel_.get(), rpcmethod_Initialize_, context, response);
}

void CompetitionTool::Stub::experimental_async::Initialize(::grpc::ClientContext* context, ::InitializationReply* response, ::grpc::experimental::ClientWriteReactor< ::Oracle>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::Oracle>::Create(stub_->channel_.get(), stub_->rpcmethod_Initialize_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::Oracle>* CompetitionTool::Stub::AsyncInitializeRaw(::grpc::ClientContext* context, ::InitializationReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::Oracle>::Create(channel_.get(), cq, rpcmethod_Initialize_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::Oracle>* CompetitionTool::Stub::PrepareAsyncInitializeRaw(::grpc::ClientContext* context, ::InitializationReply* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::Oracle>::Create(channel_.get(), cq, rpcmethod_Initialize_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::SDCTestCase, ::PrioritizationReply>* CompetitionTool::Stub::PrioritizeRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::SDCTestCase, ::PrioritizationReply>::Create(channel_.get(), rpcmethod_Prioritize_, context);
}

void CompetitionTool::Stub::experimental_async::Prioritize(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::SDCTestCase,::PrioritizationReply>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::SDCTestCase,::PrioritizationReply>::Create(stub_->channel_.get(), stub_->rpcmethod_Prioritize_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::SDCTestCase, ::PrioritizationReply>* CompetitionTool::Stub::AsyncPrioritizeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::SDCTestCase, ::PrioritizationReply>::Create(channel_.get(), cq, rpcmethod_Prioritize_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::SDCTestCase, ::PrioritizationReply>* CompetitionTool::Stub::PrepareAsyncPrioritizeRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::SDCTestCase, ::PrioritizationReply>::Create(channel_.get(), cq, rpcmethod_Prioritize_, context, false, nullptr);
}

CompetitionTool::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CompetitionTool_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CompetitionTool::Service, ::Empty, ::NameReply>(
          [](CompetitionTool::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::Empty* req,
             ::NameReply* resp) {
               return service->Name(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CompetitionTool_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< CompetitionTool::Service, ::Oracle, ::InitializationReply>(
          [](CompetitionTool::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReader<::Oracle>* reader,
             ::InitializationReply* resp) {
               return service->Initialize(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CompetitionTool_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< CompetitionTool::Service, ::SDCTestCase, ::PrioritizationReply>(
          [](CompetitionTool::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReaderWriter<::PrioritizationReply,
             ::SDCTestCase>* stream) {
               return service->Prioritize(ctx, stream);
             }, this)));
}

CompetitionTool::Service::~Service() {
}

::grpc::Status CompetitionTool::Service::Name(::grpc::ServerContext* context, const ::Empty* request, ::NameReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CompetitionTool::Service::Initialize(::grpc::ServerContext* context, ::grpc::ServerReader< ::Oracle>* reader, ::InitializationReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CompetitionTool::Service::Prioritize(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::PrioritizationReply, ::SDCTestCase>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


